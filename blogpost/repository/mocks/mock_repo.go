// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/printezisn/serverless-blog-back/blogpost/model"

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// Create provides a mock function with given fields: post
func (_m *Repo) Create(post model.BlogPost) (model.BlogPost, error) {
	ret := _m.Called(post)

	var r0 model.BlogPost
	if rf, ok := ret.Get(0).(func(model.BlogPost) model.BlogPost); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Get(0).(model.BlogPost)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.BlogPost) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repo) Delete(id string) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *Repo) Get(id string) (model.BlogPost, bool, error) {
	ret := _m.Called(id)

	var r0 model.BlogPost
	if rf, ok := ret.Get(0).(func(string) model.BlogPost); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.BlogPost)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAll provides a mock function with given fields: pageSize
func (_m *Repo) GetAll(pageSize int64) ([]model.BlogPost, error) {
	ret := _m.Called(pageSize)

	var r0 []model.BlogPost
	if rf, ok := ret.Get(0).(func(int64) []model.BlogPost); ok {
		r0 = rf(pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BlogPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMore provides a mock function with given fields: lastID, lastCreationTimestamp, pageSize
func (_m *Repo) GetMore(lastID string, lastCreationTimestamp int64, pageSize int64) ([]model.BlogPost, error) {
	ret := _m.Called(lastID, lastCreationTimestamp, pageSize)

	var r0 []model.BlogPost
	if rf, ok := ret.Get(0).(func(string, int64, int64) []model.BlogPost); ok {
		r0 = rf(lastID, lastCreationTimestamp, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BlogPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = rf(lastID, lastCreationTimestamp, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: revision, post
func (_m *Repo) Update(revision int64, post model.BlogPost) (model.BlogPost, error) {
	ret := _m.Called(revision, post)

	var r0 model.BlogPost
	if rf, ok := ret.Get(0).(func(int64, model.BlogPost) model.BlogPost); ok {
		r0 = rf(revision, post)
	} else {
		r0 = ret.Get(0).(model.BlogPost)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, model.BlogPost) error); ok {
		r1 = rf(revision, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
